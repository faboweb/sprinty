'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = reactive;

var _preact = require('preact');

var _flyd = require('flyd');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var VNode = (0, _preact.h)('').constructor;

var pool = [];

function reactive() {
  var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  var cache = pool.find(function (c) {
    return c.tag === tag;
  });
  if (cache) {
    return cache.reactive;
  }

  var ReactiveClass = function (_Component) {
    _inherits(ReactiveClass, _Component);

    function ReactiveClass(props) {
      _classCallCheck(this, ReactiveClass);

      var _this = _possibleConstructorReturn(this, (ReactiveClass.__proto__ || Object.getPrototypeOf(ReactiveClass)).call(this, props));

      _this.state = {};
      _this.subscribe(props);
      return _this;
    }

    _createClass(ReactiveClass, [{
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this.subscribe(nextProps);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.unsubscribe();
      }
    }, {
      key: 'addPropListener',
      value: function addPropListener(name, prop$) {
        var _this2 = this;

        (0, _flyd.on)(function (value) {
          // don't re-render if value is the same.
          if (value === _this2.state[name]) {
            return;
          }
          _this2.setState(_defineProperty({}, name, value));
        }, prop$);
        // return these prop$ rather than above on$ because we usually create streams in jsx. Just end those on$ will left out those prop$s which will lead to a memory leak.
        // And since prop$ is the parent of on$, just end prop$ is enough.
        // And since we will end prop$, user shouldn't use outter streams directly on jsx. Just a stream.map(v => v) is enough.
        // And in flyd, A$.end(true) will just break the links between streams dependent on A$ and A$, not destroy them
        return prop$;
      }
    }, {
      key: 'subscribe',
      value: function subscribe(props) {
        var _this3 = this;

        if (this.subscriptions) {
          this.unsubscribe();
        }

        this.subscriptions = Object.entries(props).filter(function (entry) {
          return (0, _flyd.isStream)(entry[1]);
        }).map(function (_ref) {
          var _ref2 = _slicedToArray(_ref, 2),
              key = _ref2[0],
              value = _ref2[1];

          return _this3.addPropListener(key, value);
        });
      }
    }, {
      key: 'unsubscribe',
      value: function unsubscribe() {
        this.subscriptions.forEach(function (subscription) {
          return subscription.end(true);
        });
        this.state = {};
        this.subscriptions = null;
      }
    }, {
      key: 'render',
      value: function render() {
        var _props$state = _extends({}, this.props, this.state),
            children = _props$state.children$,
            props = _objectWithoutProperties(_props$state, ['children$']);

        if (tag) {
          return _preact.h.apply(undefined, [tag, props].concat(_toConsumableArray(children)));
        }
        return children instanceof VNode ? (0, _preact.cloneElement)(children, props) : children;
      }
    }]);

    return ReactiveClass;
  }(_preact.Component);

  pool.push({ tag: tag, reactive: ReactiveClass });

  return ReactiveClass;
}