'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = h;

var _flyd = require('flyd');

var _preact = require('preact');

var _reactive = require('./reactive.js');

var _reactive2 = _interopRequireDefault(_reactive);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var VNode = (0, _preact.h)('').constructor;

function isValidElement(element) {
  // preact component can return undefined, null, string, vnode, not array, number. But we leave out undefined since flyd stream init undefined
  return element === null || typeof element === 'string' || element instanceof VNode;
}

function wrapChildren(children) {
  var notValidElement$s = children.filter(function (child) {
    return (0, _flyd.isStream)(child) && !isValidElement(child());
  });
  if (notValidElement$s.length > 0) {
    return (0, _flyd.combine)(function () {
      return children.map(function (child) {
        if (!(0, _flyd.isStream)(child)) {
          return child;
        }
        if (notValidElement$s.indexOf(child) > -1) {
          return child();
        }
        return (0, _preact.h)((0, _reactive2.default)(), { children$: child });
      });
    }, notValidElement$s);
  }
  return children.map(function (child) {
    if (!(0, _flyd.isStream)(child)) {
      return child;
    }
    return (0, _preact.h)((0, _reactive2.default)(), { children$: child });
  });
}

function hasStream(obj) {
  return Object.keys(obj).some(function (key) {
    return (0, _flyd.isStream)(obj[key]);
  });
}

function h(tag, props) {
  var defaultProps = props || {};

  for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }

  var wrappedChildren = wrapChildren(children);
  if (hasStream(defaultProps) || (0, _flyd.isStream)(wrappedChildren)) {
    return (0, _preact.h)((0, _reactive2.default)(tag), _extends({}, defaultProps, { children$: wrappedChildren }));
  }
  return _preact.h.apply(undefined, [tag, defaultProps].concat(_toConsumableArray(wrappedChildren)));
}