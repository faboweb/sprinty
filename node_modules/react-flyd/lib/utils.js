'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

exports.hasStream = hasStream;
exports.toStreams = toStreams;

var _flyd = require('flyd');

var _obj = require('flyd/module/obj');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isPlainObject = function isPlainObject(obj) {
  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' && Object.getPrototypeOf(obj) === Object.prototype;
};

function hasStream(obj) {
  return Object.keys(obj || {}).reduce(function (hasOne, key) {
    if (hasOne) return hasOne;
    var val = obj[key];
    if ((0, _flyd.isStream)(val)) return true;
    if (isPlainObject(val)) return hasStream(val);
    return hasOne;
  }, false);
}

function wrap(obj) {
  return isPlainObject(obj) && hasStream(obj) ? (0, _obj.stream)(obj) : obj;
}

function toStreams(props) {
  return Object.keys(props).reduce(function (acc, key) {
    return _extends({}, acc, _defineProperty({}, key, wrap(props[key])));
  }, {});
}