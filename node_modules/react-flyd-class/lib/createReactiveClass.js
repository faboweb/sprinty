'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = createReactiveClass;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _flyd = require('flyd');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function createReactiveClass(tag) {
  var ReactiveClass = function (_React$Component) {
    _inherits(ReactiveClass, _React$Component);

    function ReactiveClass(props) {
      _classCallCheck(this, ReactiveClass);

      var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ReactiveClass).call(this, props));

      _this.displayName = 'FlydReactiveElement-' + tag;
      _this.state = { mount: true };
      return _this;
    }

    _createClass(ReactiveClass, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this.subscribe(this.props);
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this.subscribe(nextProps);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.unsubscribe();
      }
    }, {
      key: 'addPropListener',
      value: function addPropListener(name, prop$) {
        var _this2 = this;

        return (0, _flyd.on)(function (value) {
          // don't re-render if value is the same.
          if (value === _this2.state[name]) {
            return;
          }

          var prop = {};
          prop[name] = value;
          _this2.setState(prop);
        }, prop$);
      }
    }, {
      key: 'childrenSubscription',
      value: function childrenSubscription(children) {
        var key = 'children';

        if ((0, _flyd.isStream)(children)) {
          return this.addPropListener(key, children);
        } else if (Array.isArray(children) && (0, _utils.hasStream)(children)) {
          return this.addPropListener(key, (0, _utils.arrayStream)(children));
        }
        // Do not need to subscribe to children with no streams
        return undefined;
      }
    }, {
      key: 'subscribeChildren',
      value: function subscribeChildren(children) {
        var subscription = this.childrenSubscription(children);
        if (subscription) {
          this.subscriptions.push(subscription);
        }
      }
    }, {
      key: 'subscribe',
      value: function subscribe(_ref) {
        var _this3 = this;

        var children = _ref.children;

        var props = _objectWithoutProperties(_ref, ['children']);

        if (this.subscriptions) {
          this.unsubscribe();
        }

        this.subscriptions = [];

        this.subscribeChildren(children);

        Object.keys(props).forEach(function (key) {
          var value = props[key];
          if ((0, _flyd.isStream)(value)) {
            var subscription = _this3.addPropListener(key, value);
            _this3.subscriptions.push(subscription);
          }
        });
      }
    }, {
      key: 'unsubscribe',
      value: function unsubscribe() {
        this.subscriptions.forEach(function (subscription) {
          return subscription.end(true);
        });
        this.subscriptions = null;
        this.state = { mount: true };
      }
    }, {
      key: 'render',
      value: function render() {
        var _state = this.state;
        var mount = _state.mount;

        var state = _objectWithoutProperties(_state, ['mount']);

        if (!mount) {
          return null;
        }

        // eslint-disable-next-line react/prop-types, no-unused-vars
        var _props = this.props;
        var _ = _props.mount;

        var props = _objectWithoutProperties(_props, ['mount']);

        return _react2.default.createElement(tag, _extends({}, props, state));
      }
    }]);

    return ReactiveClass;
  }(_react2.default.Component);

  return ReactiveClass;
}